# Snakefile
configfile: "config/config.yaml"

# creates global wildcard to access samples in /raw_reads
(SAMPLES,) = glob_wildcards(config["input"]["fastq"] + "{sample}_R1.fastq.gz")


# *********************************************************************
rule all:
    input:
        # ------------------------------------
        # fastqc
        expand(config["fastqc"]["results"] + "{sample}_R1_fastqc.html", sample=SAMPLES),
        expand(config["fastqc"]["results"] + "{sample}_R2_fastqc.html", sample=SAMPLES),
        expand(config["fastqc"]["results"] + "{sample}_R1_fastqc.zip", sample=SAMPLES),
        expand(config["fastqc"]["results"] + "{sample}_R2_fastqc.zip", sample=SAMPLES),
        # ------------------------------------
        # multiqc
        config["multiqc"]["results"],
        # ------------------------------------
        # fastp
        expand(config["fastp"]["results"] + "{sample}_trimmed_R1.fastq.gz", sample=SAMPLES),
        expand(config["fastp"]["results"] + "{sample}_trimmed_R2.fastq.gz", sample=SAMPLES),
        expand(config["fastp"]["results"] + "{sample}_fastp.html", sample=SAMPLES),
        expand(config["fastp"]["results"] + "{sample}_fastp.json", sample=SAMPLES),
        # ------------------------------------
        # SPAdes
        expand(config["spades"]["results"] + "{sample}/contigs.fasta", sample=SAMPLES),
        # ------------------------------------
        # Bowtie2
        expand(config["bowtie2"]["results"] + "{sample}.sorted.bam", sample=SAMPLES),
        expand(config["bowtie2"]["results"] + "{sample}.sorted.bam.bai", sample=SAMPLES),
        expand(config["bowtie2"]["results"] + "{sample}.sorted.sam", sample=SAMPLES),

rule fastqc:
    input:
        r1=config["input"]["fastq"] + "{sample}_R1.fastq.gz",
        r2=config["input"]["fastq"] + "{sample}_R2.fastq.gz",
    output:
        r1_html=config["fastqc"]["results"] + "{sample}_R1_fastqc.html",
        r2_html=config["fastqc"]["results"] + "{sample}_R2_fastqc.html",
        r1_zip=config["fastqc"]["results"] + "{sample}_R1_fastqc.zip",
        r2_zip=config["fastqc"]["results"] + "{sample}_R2_fastqc.zip",
        touch_file=touch(config["fastqc"]["log"] + "{sample}_fastqc_done.txt")
    params:
        dir=directory(config["fastqc"]["results"]),
    threads:
        config.get("fastqc_threads", 8)
    log:
        config["fastqc"]["log"] + "{sample}.log",
    conda:
        "envs/fastqc.yaml"
    shell:
        """
        echo "##############################################"
        echo "------------    Running FastQC    ------------"
        echo "##############################################"

        fastqc {input.r1} {input.r2} \
            --threads {threads} \
            --format fastq \
            --quiet \
            --outdir {params.dir} \
            2> {log}
        """

rule multiqc:
    input:
        fastqc_done=expand(config["fastqc"]["log"] + "{sample}_fastqc_done.txt", sample=SAMPLES)
    params:
        rules.fastqc.params.dir,
    output:
        dir=directory(config["multiqc"]["results"]),
    log:
        config["multiqc"]["log"] + "multiqc.log",
    conda:
        "envs/multiqc.yaml"
    shell:
        """
        echo "##############################################"
        echo "-----------    Running MultiQC    ------------"
        echo "##############################################"
        
        multiqc \
            --force {params} \
            --outdir {output.dir} \
            2> {log}
        """

rule fastp:
    input:
        r1=config["input"]["fastp"] + "{sample}_R1.fastq.gz",
        r2=config["input"]["fastp"] + "{sample}_R2.fastq.gz"
    output:
        r1_trimmed=config["fastp"]["results"] + "{sample}_trimmed_R1.fastq.gz",
        r2_trimmed=config["fastp"]["results"] + "{sample}_trimmed_R2.fastq.gz",
        html=config["fastp"]["results"] + "{sample}_fastp.html",
        json=config["fastp"]["results"] + "{sample}_fastp.json",
        touch_file=touch(config["fastp"]["log"] + "{sample}_fastp_done.txt"),
    params:
        dir=directory(config["fastp"]["results"])
    threads:
        config.get("fastp_threads", 8)
    log:
        config["fastp"]["log"] + "{sample}.log"
    conda:
        "envs/fastp.yaml"
    shell:
        """
        echo "##############################################"
        echo "-----------    Running FastP    ------------"
        echo "##############################################"
        
        fastp \
        -i {input.r1} -I {input.r2} \
        -o {output.r1_trimmed} \
        -O {output.r2_trimmed} \
        --detect_adapter_for_pe \
        --thread {threads} \
        -h {output.html} \
        -j {output.json} \
        2> {log}
        """

rule spades:
    input:
        r1_trimmed=config["fastp"]["results"] + "{sample}_trimmed_R1.fastq.gz",
        r2_trimmed=config["fastp"]["results"] + "{sample}_trimmed_R2.fastq.gz",
        fastp_done=config["fastp"]["log"] + "{sample}_fastp_done.txt"
    output:
        contigs=config["spades"]["results"] + "{sample}/contigs.fasta",
    params:
        outdir=directory(config["spades"]["results"] + "{sample}"),
        kmer=lambda wildcards, input: get_kmer(config.get("spades_kmer_value", "short"))
    threads: 
        config.get("spades_threads", 8)
    log:
        config["spades"]["log"] + "{sample}.log"
    conda:
        "envs/spades.yaml"
    shell:
        """
        echo "##############################################"
        echo "-----------    Running SPAdes    ------------"
        echo "##############################################"
        echo "Using k-mer setting: {params.kmer}"
        
        spades.py \
        --pe1-1 {input.r1_trimmed} \
        --pe1-2 {input.r2_trimmed} \
        --threads {threads} \
        --careful \
        --memory 64 \
        --phred-offset 33 \
        -k {params.kmer} \
        -o {params.outdir} \
        > {log} 2>&1
        """
        
def get_kmer(kmer_config):
    if kmer_config == "long":
        return "21,23,25,27,29,31,33,35,37,39,41,43,45,47,49,51,53,55,57,59,61,63,65,67,69,71,73,75,77,79,81,83,85,87,89,91,93,95,97,99,101,103,105,107,109,111,113,115,117,119,121,123,125,127"
    elif kmer_config == "short":
        return "77,85,99,111,127"
    else:
        return kmer_config # custom val can be set in config.yaml
        
    
rule bowtie2_mapping:
    input:
        contigs=config["spades"]["results"] + "{sample}/contigs.fasta",
        r1_trimmed=config["fastp"]["results"] + "{sample}_trimmed_R1.fastq.gz",
        r2_trimmed=config["fastp"]["results"] + "{sample}_trimmed_R2.fastq.gz",
    output:
        bam=config["bowtie2"]["results"] + "{sample}.sorted.bam",
        bai=config["bowtie2"]["results"] + "{sample}.sorted.bam.bai",
        sam=config["bowtie2"]["results"] + "{sample}.sorted.sam"
    params:
        threads=config["bowtie2_threads"],
        outdir=directory(config["bowtie2"]["results"]),
        temp_sam=temp(config["bowtie2"]["results"] + "{sample}.sam"),
        temp_bam=temp(config["bowtie2"]["results"] + "{sample}.bowtie2.bam")
    threads:
        config.get("bowtie2_threads", 8)
    log:
        config["bowtie2"]["log"] + "{sample}.log"
    conda:
        "envs/bowtie2.yaml"
    shell:
        """
        echo "##############################################"
        echo "----------- Running Bowtie2 Mapping ----------"
        echo "##############################################"
        
        # Build Bowtie2 index
        echo "Building index for {input.contigs}" >> {log} 2>&1
        bowtie2-build {input.contigs} {input.contigs} >> {log} 2>&1
        
        # Map reads to assembly
        echo "Mapping reads to assembly" >> {log} 2>&1
        bowtie2 -x {input.contigs} --reorder \
            -1 {input.r1_trimmed} \
            -2 {input.r2_trimmed} \
            -p {threads} \
            -S {params.temp_sam} >> {log} 2>&1
        
        # Convert SAM to BAM
        echo "Converting SAM to BAM" >> {log} 2>&1
        samtools view -S -b {params.temp_sam} > {params.temp_bam} 2>> {log}
        
        # Sort BAM file
        echo "Sorting BAM file" >> {log} 2>&1
        samtools sort -@ {threads} -o {output.bam} {params.temp_bam} 2>> {log}
        
        # Index BAM file
        echo "Indexing BAM file" >> {log} 2>&1
        samtools index {output.bam} {output.bai} 2>> {log}
        
        # Convert sorted BAM to SAM for output
        echo "Converting sorted BAM to SAM" >> {log} 2>&1
        samtools view -h -o {output.sam} {output.bam} 2>> {log}
        
        # Clean up intermediate files
        rm -f {params.outdir}{wildcards.sample}.bowtie2.bam
        """


        
